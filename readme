 SPRING MVC ROUTE PLANNER
 
 localhost:8080/routeplanner/
 localhost:8080/routeplanner/login
  
 --------------------------------------
 Techniques:
 
 - session var
 
 - return "redirect:/admin/rates/prices";
 
 - use of model attribute (eg User, list) ==> ${}
   map.addAttribute("testModelMap", "model map property");
   <p th:text="'Test model app property: ' + ${testModelMap}" />
    
 - direct usage from internationalization file
   <h1 th:text = "#{international.text}"></h1>
 
 - form object binding with thyme
   mv.addObject("statement", statement);
   <textarea rows="4" cols="50" th:field="*{summary}">Summary</textarea>
 
 - session variable:
   session ==> ${session.} 
   request.getSession().setAttribute("xxx",zzz);
 
 - get current dir
   String currLocation = System.getProperty("user.dir");
 
 - Get props in bespoke location:
   ResourceBundle rb = ResourceBundle.getBundle("config.sysprops"); [folder + file prefix]
   String value = rb.getString("database.name");
 
 - drop downs populated from enum and result read into form object as enum property
   see PassengerType to populate with translated text in java - is there a better way of doing this?
  
 - controller read from session:
   Incident incidentX = (Incident)session.getAttribute("mockInc");
 
 - include fragments:
   https://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#rendering-template-fragments
 
 - thymeleaf
   https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#introducing-thymeleaf
 
 - mix file var and session / model: 
   th:text="'The name of the user is ' + ${user.name}"
 
 - conditionals: (see also 4.10)
   <div th:if="${user.isAdmin()} == false"> 
   <div th:if="${user.isAdmin() == false}">
   <div th:if="${!user.isAdmin() and !user.isMember()}" th:text = "#{rp.login.title}"></div>
 
 - hibernate JPA: using abstract superclass for subclasses which are annotated with @Entity
   https://stackoverflow.com/questions/3827494/inherited-abstract-class-with-jpa-hibernate
 
 - useful spring boot properties:
   https://docs.spring.io/spring-boot/docs/1.1.4.RELEASE/reference/htmlsingle/#common-application-properties
 
 - formatting dates:
   https://www.baeldung.com/dates-in-thymeleaf
   https://stackoverflow.com/questions/45291061/spring-boot-thymeleaf-getting-time-from-input
   
   https://stackoverflow.com/questions/34883357/spring-java-time-localdatetime-binding-issue
 
 - tabular output:
   https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#iteration-basics
   
   
   https://stackoverflow.com/questions/38367339/thymeleaf-how-to-loop-a-list-by-index
 
   https://stackoverflow.com/questions/17692941/values-for-thfield-attributes-in-checkbox
 https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#creating-a-form
 
 --------------------------------------
 
 <label th:for="${#ids.prev('currentSelection')}" th:text="${item.routeQuery.currRouteStart}"></label>
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.routeQuery.currRouteDest}"></label>
 
 
 insert into passenger_type values(1, 'OVER 75','OAP');
insert into passenger_type values(2, 'STANDARD PLUS','PLU');
insert into passenger_type values(3, 'BOG STANDARD','STD');
insert into passenger_type values(4, 'STUDENT POOR','STU');
 
 
 <label th:for="${#ids.prev('currentSelection')}" th:text="${item.routeQuery.startAndDestinationLabel}"></label>
 
 <input type="radio" th:field="*{currentSelection}" th:value="${item}" />
 
 
 WAS view basket:
 
 <div th:object="${ticket.passengerType}">
			<label th:text = "#{rp.basket.passenger.type}"></label>
		    <select id="passTypes" name="passTypes">
		    <!--<select th:field="*{passengerType}">-->
		        <option th:each="pt : ${passengerTypeList}"
		                th:value="${pt}"
		                th:text="${pt.code}"></option>
		    </select>
		</div> 
 
 
 
 		<li th:each="item: *{tickets}">
	        <input type="radio" th:field="*{currentSelection}" th:value="${item}" />
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.ticketType.descriptionTrans}"></label>                                   
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.passengerType.codeDisplay}"></label>
		</li>
 
 
 	<form th:object="*{tickets}">
		    <th:block th:each="column: ${columns}">
		        <input type="radio" th:value="${column.key}" th:id="${column.key}" th:field="*{type}" />
		        <label th:for="${column.key}" th:text="${column.value}" />
		    </th:block>
		</form>
		
		
		
		
		!!!************ https://medium.com/@grokwich/spring-boot-thymeleaf-html-form-handling-762ef0d51327
		            +++https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#order-list
		***********https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#handling-the-command-object
		
		************ OLD STRUTS 1 view_basket.jsp
	<c:forEach var="thisBasket" items="${state.basketList}" varStatus="loopCount">
   		<tr>	
   			<td class="tableContents">${loopCount.count}</td>
   			<td class="tableContents">${thisBasket.start}</td>
   			<td class="tableContents">${thisBasket.destination}</td>
   			<td class="tableContents">${thisBasket.ticket.name}</td>    
   			<td class="tableContents">${thisBasket.numberTickets}</td>
   			<td class="tableContents">${thisBasket.travelDate}</td>
   			<td class="tableContents">${thisBasket.passengerType.code}</td>
   			<td class="tableContents">${thisBasket.totalPayment}
   			<td><input type="checkbox" name="remove${loopCount.count}" /></td>
   			<td><input type="checkbox" name="purchase${loopCount.count}" /></td>
   			<input type="hidden" name="count" value="${loopCount.count}" />
    	</tr>
		</c:forEach>
	
	
	Date format too: https://stackoverflow.com/questions/49570719/using-input-type-hidden-combine-with-thymeleaf
	
 =========================================
 possible avenues:
 
 https://stackoverflow.com/questions/34959430/bootstrap-datatable-with-select-column-with-radio-button
 
 
 CSS:
 https://css-tricks.com/forums/topic/selecting-radio-button-when-table-row-is-clicked/
 
 
 <li th:each="item: *{tickets}">
	        <input type="radio" th:field="*{currentSelection}" th:value="${item}" />
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.ticketType.descriptionTrans}"></label>                                   
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.passengerType.codeDisplay}"></label>
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.numUnits}"></label>
	        <label th:for="${#ids.prev('currentSelection')}" th:text="${item.travelDate}"></label>
		</li>
 
 DELETING AN OBJECT QITH A SUBMIT BUTTON:
 https://stackoverflow.com/questions/43606063/spring-thymeleaf-delete-object-from-html-table-and-pass-id-to-controller
 
 
 
 =========================================
 
 - OK fix button
 - OK refactor existing with new model
 - OK improve travelInfoService
 - OK investigate and refactor the model to use composition if necessary.................
 - OK database + load sql file for non-admin / membership use
   --> OK save initial basket dummy
   --> OK save actual initial basket 
   --> OK use user1 from data.sql
   --> OK refactor Rule for simplicity! remove relevantItems
   --> OK research Date and hibernate [resorting to LocalDateTime + LocalDate]
   --> OK decision on usage of DataModel
   --> OK add hibernate: PassengerType ==> Rule ==> RouteQuery ==> Ticket ==> inehritance and hibernate ==> Order ==> purchase ==> PaymentInfo
   --> OK ddl for ContactDetails, Person
   --> OK complete ddl for ticket, order and purchase
   --> OK complete ddl for basket   
   --> OK complete repositories
    --> OK add in the role level conversions
       --> OK decouple db from enum
       --> OK apply RoleLevel in User with actual roles and the static UserLevel methods, or convert direct in thyme if possible
       --> OK sort out navbar logic to avoid malformation for different roles 
   --> OK insert passenger types as per the old system
   --> OK handle ticket types enums (eg on peak, off peak) 
   --> OK refactor to add basket page [tickets list and add new ticket]
       --> OK adapt view_basket page  
       --> OK direct to checkout page (which will include payment details and person details) 
   --> OK implement place order (add to basket)
   --> OK confirm flow is final
   --> IN PROGRESS view basket page: 
       --> 1st form: 
           --> OK resolve passenger type and ticket type translation issues
           --> OK add num units
           --> OK add ticket travel date
           --> OK add open OR fix the dm to avoid having to do this
      --> FIXED investigate ddl issue that seems to have started around Wednesday mid-pm (added old rp tables)
   
===========================================================================================================================
===========================================================================================================================
***************************** STATE OF PLAY *****************************   
===========================================================================================================================
===========================================================================================================================
ISSUES AND CORE JOURNEY:

- clean up existing mess
  - OK tidy existing basket code
  - OK remove all the artificial counters!
  - OK keep a record of the changes for the payment info stuff
  - OK get working and smarten basket presentation a little (ie with table and headers and remove unnecessary th:text fields)
    --> OK new ticket values need to set the defaults
    --> OK give basket contents a min height
    --> OK apply logic for msg 
- OK persist basket and items, and maybe shopping trolley
- OK improve the display for add ticket / basket contents page (ie tables and border)
- OK write queries to get basket contents, route info and rules from db
- OK save basket to the db at login if one is not in session
- OK find any basket that is not empty and sort out the logic for this  
- OK get this working?
- OK tidy up usage of session: incl BasketController.addTicket()
- OK add route info and other details to the ticket persistence
- OK add new ticket needs to have labels for the start and destination
- OK add start and destination on ticket type causes a crash
- OK research workaround for adding parameters when referencing internationalization files & put start and destination at top of new ticket title
- OK search another journey button:  Add Another Journey
- OK make sure there is no inconsistency between session and model usage





- separate flow so there is a contact details and then a payment info page
- personal details page
- payment info add new / remove / select 
- design journey for a) registration (non-members) b) admin corner (admin)
- implement registration page



- remove view basket from view basket page.....
- log the id of the basket items once they have been persisted
- apply the remove checkbox to the basket contents instead of the current radio
  - https://stackoverflow.com/questions/36500731/how-to-bind-an-object-list-with-thymeleaf [input checkbox]
  - https://stackoverflow.com/questions/43606063/spring-thymeleaf-delete-object-from-html-table-and-pass-id-to-controller [remove]



- smarten up basic shopping route and functionality to fully save a basket
- logic around creating an order and a purchase. Careful to set basket.open = false; + each individual item too. 
- add in placeholder journey pages with the links insert
- add transaction management
- add poc spring form validation
- add poc controller test and all unit test method stubs    
- consider dynamic locale retrieval in enums or use of session eg. th:text="${session.mockInc.reporter.firstName}"
- sort out error controller, especially for dates and routeplanner errors eg. when start and destination are the same, print some message as a response 
       
  --------------------------------------
 COMPLETE CORE FUNCTIONALITY

   --> complete spring form validation
   --> complete unit tests
   --> give user option to change the locale with photos
   --> full testing & tighten functionality      
   --> trim automatic spring boot column sizes 
   --> consider Blob to store RouteQuery.routeInfo
   --> fill in the gaps of this basic journey / polish functionality
   --> make robust, even without spring security. eg. if a user tries to go directly to page.  
   --> server side validation
   --> javadocs
   --> check warnings
   --> it is worth noting that route queries are not unique by start and dest, but tied to a particular query instance.
       it may be worth rethinking this, and perhaps checking the db first before calculating????
   --> apply zones coverage
   
---------------------------------------
MAJOR EXTENSIONS   
      
   --> spring security   
   --> add unit test shells including for controller
   --> update all the prop files for all langs
   --> auditing
   --> allow for oracle as well as mysql + sqlserver, adapt with dialects         
   --> more soffisticated HTML, CSS and js - redesign frontend
   --> jasper reports
   --> liquibase
   --> archiving
   --> upgrade to spring boot 3.0           
 -------------------------------------- 
