 SPRING MVC ROUTE PLANNER
 
 localhost:8080/routeplanner/
 localhost:8080/routeplanner/login
  
 --------------------------------------
 Techniques:
 
 - session var
 
 - use of model attribute (eg User, list) ==> ${}
   map.addAttribute("testModelMap", "model map property");
   <p th:text="'Test model app property: ' + ${testModelMap}" />
    
 - direct usage from internationalization file
   <h1 th:text = "#{international.text}"></h1>
 
 - form object binding with thyme
   mv.addObject("statement", statement);
   <textarea rows="4" cols="50" th:field="*{summary}">Summary</textarea>
 
 - session variable:
   session ==> ${session.} 
   request.getSession().setAttribute("xxx",zzz);
 
 - get current dir
   String currLocation = System.getProperty("user.dir");
 
 - Get props in bespoke location:
   ResourceBundle rb = ResourceBundle.getBundle("config.sysprops"); [folder + file prefix]
   String value = rb.getString("database.name");
 
 - drop downs populated from enum and result read into form object as enum property
 
 - controller read from session:
   Incident incidentX = (Incident)session.getAttribute("mockInc");
 
 - include fragments:
   https://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#rendering-template-fragments
 
 - thymeleaf
   https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#introducing-thymeleaf
 
 - mix file var and session / model: 
   th:text="'The name of the user is ' + ${user.name}"
 
 - conditionals: (see also 4.10)
   <div th:if="${user.isAdmin()} == false"> 
   <div th:if="${user.isAdmin() == false}">
   <div th:if="${!user.isAdmin() and !user.isMember()}" th:text = "#{rp.login.title}"></div>
 
 - hibernate JPA: using abstract superclass for subclasses which are annotated with @Entity
   https://stackoverflow.com/questions/3827494/inherited-abstract-class-with-jpa-hibernate
 
 - useful spring boot properties:
   https://docs.spring.io/spring-boot/docs/1.1.4.RELEASE/reference/htmlsingle/#common-application-properties
 
 --------------------------------------

 
 - OK fix button
 - OK refactor existing with new model
 - OK improve travelInfoService
 - OK investigate and refactor the model to use composition if necessary.................
  
  
 - database + load sql file for non-admin / membership use
   --> OK save initial basket dummy
   --> OK save actual initial basket 
   --> OK use user1 from data.sql
   --> OK refactor Rule for simplicity! remove relevantItems
   --> OK research Date and hibernate [resorting to LocalDateTime + LocalDate]
   --> OK decision on usage of DataModel
   --> OK add hibernate: PassengerType ==> Rule ==> RouteQuery ==> Ticket ==> inehritance and hibernate ==> Order ==> purchase ==> PaymentInfo
   --> OK ddl for ContactDetails, Person
   --> OK complete ddl for ticket, order and purchase
   --> OK complete ddl for basket   
   --> OK complete repositories
 
 
  --------------------------------------
 From Thursday
  
   --> IN PROGRESS add in the role level conversions
       --> OK decouple db from enum
       --> apply RoleLevel in User with actual roles and the static UserLevel methods, or convert direct in thyme if possible      
   --> insert passenger types as per the old system
   --> handle ticket types enums (eg on peak, off peak) 
   --> save dummy basket contents: Ticket / Abstract Item   
   --> save dummy order and ensure refs stay intact   
   --> save dummy purchase and ensure refs stay intact   
   --> add transaction management 
   --> trim automatic spring boot column sizes 
   --> consider Blob to store RouteQuery.routeInfo
 
 - create an order
   --> add dummy tickets
   --> add dummy payments types to db
   --> get list of payment types and display as a table with select field
   --> get list of ticket types and display as a table with select field
  - create a purchase
  
 ==> further areas:
   --> fill in the gaps of this basic journey / polish functionality 
   --> add registration journey
   --> add admin functionality and journey
   --> server side validation
   --> spring security   
   --> add unit test shells including for controller   
   --> more soffisticated HTML, CSS and js - redesign frontend
   --> jasper reports
   --> liquibase
   --> archiving          
  
 - do this tutorial!
   https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot 
  
 -------------------------------------- 
  
  